name: Run Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0, 0,12 * * *'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  formatting:
    name: Check Formatting
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: 3.8
    - name: Install Formatting
      run: |
        python -m pip install --upgrade pip
        pip install ruff flake8
    - name: Check Formatting
      run: |
        ruff check .
        flake8 .

  typos:
    name: Typos
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false

      - name: typos-action
        uses: crate-ci/typos@v1.29.10

  tests:
    name: Run Unit Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - python-version: 3.8
            os: ubuntu-latest
          - python-version: 3.9
            os: ubuntu-latest
          - python-version: "3.10"
            os: ubuntu-latest
          - python-version: "3.11"
            os: ubuntu-latest
          - python-version: "3.12"
            os: ubuntu-latest
          - python-version: "3.13"
            os: ubuntu-latest
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install APT On Linux
      run: |
        sudo apt-get update -qq -y
        # sudo apt-get install -qq -y freeglut3-dev mesa-utils libgl1-mesa-glx libgl1-mesa-dev
        sudo apt-get install -qq -y xvfb # for headless testing
    - name: Install Dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install pytest
    - name: Install scikit-robot-pyrender
      run: |
        pip install -e .
    - name: Test basic import
      run: |
        python -c "import pyrender; print('pyrender version:', pyrender.__version__)"
    - name: Run Basic Tests
      run: |
        # Run basic functionality test with software rendering
        export LIBGL_ALWAYS_SOFTWARE=1
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 2
        python -c "
        import pyrender
        import numpy as np

        # Test basic scene creation
        scene = pyrender.Scene()
        camera = pyrender.PerspectiveCamera(yfov=np.pi / 3.0, znear=0.1, zfar=100.0)
        scene.add(camera)

        # Test offscreen renderer
        try:
            renderer = pyrender.OffscreenRenderer(viewport_width=640, viewport_height=480)
            color, depth = renderer.render(scene)
            print('Offscreen rendering test: PASSED')
            print(f'Color shape: {color.shape}, Depth shape: {depth.shape}')
            renderer.delete()
        except Exception as e:
            print(f'Offscreen rendering test failed: {e}')
            raise
        "
